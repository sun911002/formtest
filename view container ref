https://blog.angularindepth.com/working-with-dom-in-angular-unexpected-consequences-and-optimization-techniques-682ac09f6866


import { Component,ViewChild,ViewChildren,QueryList } from '@angular/core';
import { ViewContainerRef,ElementRef,TemplateRef,AfterViewInit,AfterViewChecked } from '@angular/core';

@Component({
  selector: 'my-app',
  templateUrl: './app.component.html',
  styleUrls: [ './app.component.css' ]
})
export class AppComponent  {
  p:any;
@ViewChild('vc',{read:ViewContainerRef})vc:ViewContainerRef;
@ViewChildren('c',{read:ElementRef})childcmp:QueryList<ElementRef>;
@ViewChild(TemplateRef)template:TemplateRef<null>;


 ngAfterViewInit()
  {
   this.vc.createEmbeddedView(this.template);   
  }
  
ngAfterViewChecked(){
  console.log("the number of childs:" +this.childcmp.length);
 //this.p=this.childcmp.length;
    
}
remove(){
  this.vc.clear();
}


}
///**************************view **************************//
<h1>view container</h1>
<button type="button" (click)=remove()>remove</button>
<ng-container #vc></ng-container>
<ng-template>
  <app-parent #c></app-parent>
</ng-template>
{{p}}

***********************view container ****************************
@ViewChild('vc', {read: ViewContainerRef}) vc: ViewContainerRef;
  component = null;

  constructor(private resolver: ComponentFactoryResolver) {
  }

  show(type) {
    this.component = type === 'a' ? AComponent : BComponent;
    const factory = this.resolver.resolveComponentFactory(this.component);
    this.vc.clear();
    this.vc.createComponent(factory);
  }
}
*************************
import {AfterViewInit, Component, TemplateRef, ViewChild, ViewContainerRef, ViewRef} from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <button (click)="show('1')">Show Template 1</button>
    <button (click)="show('2')">Show Template 2</button>
    <div>
      <ng-container #vc></ng-container>
    </div>
    <ng-template #t1><span>I am SPAN from template 1</span></ng-template>
    <ng-template #t2><span>I am SPAN from template 2</span></ng-template>
  `
})
export class AppComponent implements AfterViewInit {
  @ViewChild('vc', {read: ViewContainerRef}) vc: ViewContainerRef;
  @ViewChild('t1', {read: TemplateRef}) t1: TemplateRef<null>;
  @ViewChild('t2', {read: TemplateRef}) t2: TemplateRef<null>;
  view1: ViewRef;
  view2: ViewRef;

  ngAfterViewInit() {
    this.view1 = this.t1.createEmbeddedView(null);
    this.view2 = this.t2.createEmbeddedView(null);
  }

  show(type) {
    const view = type === '1' ? this.view1 : this.view2;
    this.vc.detach();
    this.vc.insert(view);
  }
}




